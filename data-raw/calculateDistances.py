# This reads in embeddings generated by getEmbeddings.py and exports to various
# formats for further processing

import json
import pandas as pd
import numpy as np

df = pd.read_parquet("embeddings_small.parquet")

kanji = df["kanji"]
embeddings = df["embeddings"]
num = len(kanji)

def cosine_distance(a: np.ndarray, b: np.ndarray):
    return 1 - a.dot(b)

def save_nearest_neighbors_to_json(N_NEAREST):
    # For use in the visualisation tool
    out = dict()
    for index in range(num):
        char = embeddings[index]
        distances = np.array([cosine_distance(char, embeddings[k]) for k in range(num)])
        orders = np.argsort(distances) # The indices of the kanji with the smallest distance to char

        selection = orders[1:N_NEAREST+1]
        out[kanji[index]] = {kanji[i]: np.round(distances[i],4) for i in selection}

    for char in out:
        for neighbor in out[char]:
            distance = out[char][neighbor]
            out[neighbor][char] = distance
    obj = {"nearest": out,"inverted":"false","scaleBy":0.75,"description":"Semantic kanji distances through text embeddings","title":"Embedding Cosine Distance"}

    with open("dembeddings.json", "w") as fp:
        json.dump(obj, fp)

def save_distance_matrix_to_csv():
    # For use in R
    out = {kanji[index]: np.array([cosine_distance(embeddings[index], embeddings[k]) for k in range(num)]) for index in range(num)}
    df = pd.DataFrame(out, index=kanji)
    df.to_csv('dembeddings.csv')
